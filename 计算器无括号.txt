import java.util.Scanner;

public class Text {

	public static void main(String[] args) {
		String expression = "";	//输入表达式
		Scanner scanner = new Scanner(System.in);
		System.out.println("输入表达式:");
		 expression = scanner.nextLine();
		ArrayStack2 numStack = new ArrayStack2(10);//创建	数栈
		ArrayStack2 operStack = new ArrayStack2(10);//创建	符号栈
		//定义需要的相关变量
		int index = 0;//扫描expression
		int num1 = 0; 
		int num2 = 0;
		int oper = 0;
		int res = 0;
		char ch = ' '; //将每次扫描得到char保存到ch
		String keepNum = ""; //用于拼接 多位数
		while(true) {
			
			ch = expression.substring(index, index+1).charAt(0);
		
			if(operStack.isOper(ch)) {//如果是运算符
			
				if(!operStack.isEmpty()) {
				
					if(operStack.priority(ch) <= operStack.priority(operStack.peek())) {
						num1 = numStack.pop();
						num2 = numStack.pop();
						oper = operStack.pop();
						res = numStack.cal(num1, num2, oper);
					
						numStack.push(res);
						
						operStack.push(ch);
					} else {
						
						operStack.push(ch);
					}
				}else {
					
					operStack.push(ch); // 1 + 3
				}
			} else { //如果是数，则直接入数栈
				//如果是数，直接入数值栈
				//但此时得到的数是字符 ASCII值是  num+48
				numStack.push(ch-48);
			
				keepNum += ch;
				
				
				if (index == expression.length() - 1) {
					numStack.push(Integer.parseInt(keepNum));
				}else{
					
					if (operStack.isOper(expression.substring(index+1,index+2).charAt(0))) {
						
						numStack.push(Integer.parseInt(keepNum));
						
						keepNum = "";
						
					}
				}
			}
			index++;
			if (index >= expression.length()) {
				break;
			}
		}
					
		while(true) {
			//如果符号栈为空，则计算到最后的结果, 数栈中只有一个数字【结果】
			if(operStack.isEmpty()) {
				break;
			}
			num1 = numStack.pop();
			num2 = numStack.pop();
			oper = operStack.pop();
			res = numStack.cal(num1, num2, oper);
			numStack.push(res);//入栈
		}

		int res2 = numStack.pop();
		System.out.printf("表达式 %s = %d", expression, res2);
	}
}
class ArrayStack2{
	private int maxSize;
	private int[] stack;
	private int top = -1;
	
	public ArrayStack2(int maxSize){
		this.maxSize = maxSize;
		stack = new int [this.maxSize];
	}
	
	
	public boolean isFull() {
		return top == maxSize -1;
	}
	
	public boolean isEmpty() {
		return top == -1;
	}
	
	public void push(int value) {
		if(isFull()) {
			System.out.println("栈满！！");
			return;
		}
		top++;
		stack[top] = value;
	}

	public int pop() {
		
		if(isEmpty()) {
			System.out.println("栈空，没有数据！！");
			return 0;
			//throw new RuntimeException("空栈！");
		}
		
		int value  = stack[top];
		top --;
		return value;
	}
	
	public void list() {
		if(isEmpty()) {
			System.out.println("栈空，没有数据！！");
			return;
		}
		for(int i =top;i>=0;i--) {
			System.out.printf("stack[%d] = %d \n",i,stack[i]);
		}
	}
	
	public int peek() {
		return stack[top];
	}
	
	public int priority(int oper) {
		if(oper == '*'||oper=='/') {
			return 1;
		}else if(oper == '+'||oper =='-') {
			return 0;
		}else {
			return -1;
		}
	}
	
	public boolean isOper(char val) {
		return val == '+'||val == '-'||val == '*'||val == '/';
	}

	public int cal(int num1,int num2,int oper) {
		int res = 0;
		switch (oper) {
		case '+':
			res = num1+num2;
			break;
		case '-':
			res = num2-num1;
			break;
		case '*':
			res = num1 * num2;
			break;
		case '/':
			res = num2/num1;
			break;
		default:
			break;
		}
		return res;
	}	
}